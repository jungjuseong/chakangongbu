package com.chakgong.api.hateoas;

import com.chakgong.api.controller.AcademyController;
import com.chakgong.api.entity.AcademyEntity;
import com.chakgong.api.model.Academy;
import com.chakgong.api.model.Tag;
import org.springframework.beans.BeanUtils;
import org.springframework.hateoas.server.mvc.RepresentationModelAssemblerSupport;
import org.springframework.stereotype.Component;

import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.stream.StreamSupport;

import static java.util.stream.Collectors.toList;
import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.linkTo;
import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.methodOn;

/**
 * @author : jungjuseong@gmail.com
 * @project : chakgong - 착한공부
 **/
@Component
public class AcademyRepresentationModelAssembler extends
    RepresentationModelAssemblerSupport<AcademyEntity, Academy> {

  /**
   * Creates a new {@link RepresentationModelAssemblerSupport} using the given controller class and
   * resource type.
   */
  public AcademyRepresentationModelAssembler() {
    super(AcademyController.class, Academy.class);
  }

  /**
   * Coverts the Academy entity to resource
   *
   * @param entity
   */
  @Override
  public Academy toModel(AcademyEntity entity) {
    Academy resource = createModelWithId(entity.getId(), entity);
    BeanUtils.copyProperties(entity, resource);
    resource.setId(entity.getId().toString());
    resource.setTag(
        entity.getTags().stream().map(t -> new Tag().id(t.getId().toString()).name(t.getName()))
            .collect(toList()));
    // Self link generated by createModelWithId has missing api path. Therefore generating additionally.
    // can be removed once fixed.
    resource.add(linkTo(methodOn(AcademyController.class).getAcademy(entity.getId().toString()))
        .withSelfRel());
    resource.add(linkTo(methodOn(AcademyController.class).queryAcademys(null, null, 1, 10))
        .withRel("Academys"));
    return resource;
  }

  /**
   * Coverts the collection of Academy entities to list of resources.
   *
   * @param entities
   */
  public List<Academy> toListModel(Iterable<AcademyEntity> entities) {
    if (Objects.isNull(entities)) {
      return Collections.emptyList();
    }
    return StreamSupport.stream(entities.spliterator(), false).map(p -> toModel(p))
        .collect(toList());
  }
}
